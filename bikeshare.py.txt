import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Greetings. US bikeshare data is available for examinaion.')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input('Please select the city of your choice: ')
    while city not in ['chicago', 'new york city', 'washington']:
        print ("Invalid Selection: Available selections include chicago, new york city and washington: ").lower()
        
    # TO DO: get user input for month (all, january, february, ... , june)
    month = input('Please enter the month you would like to evaluate (type all for overview:) ').lower()
    while month not in ['all','january', 'february', 'march', 'april', 'may', 'june']:
        print ('Invalide Selection: Please enter the month as: january, february, march, etc').lower()

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    day = input('Please enter the day you would like to evaluate (type all for overview): ').lower()
    while day not in ['all','monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']:
        print ('Invalid Selection: Please enter the day as: monday, tuesday, wednesday, etc').lower()

    print('_'*60)
    return city, month, day

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    
    df = pd.read_csv(CITY_DATA[city])
        
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['End Time'] = pd.to_datetime(df['End Time'])
    
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    
    if month != 'all':
        month = ['January', 'February', 'March', 'April', 'May', 'June']
        month = months.index(month) + 1
        df = df[df['month'] == month]
    
    if day != 'all':
        df = df[df['day_of_week'] == day.title()]
    
    return df

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nFrequent travel time indication.\n')
    start_time = time.time()
    
    # TO DO: display the most common month
    print('Best Performing Month:', df['month'].mode()[0])
    
    # TO DO: display the most common day of week
    print('Best Performing Day:', df['day_of_week'].mode()[0])
    
    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    common_hour = df['hour'].mode()[0]
    print('Best Performing Hour:', common_hour)
    
    print('_'*60)

def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nIndication of common routes and frequently used stations.\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    Departure_Station = df['Start Station'].value_counts().idxmax()
    print('Most Common Departure:', Departure_Station)
    
    # TO DO: display most commonly used end station
    Destination_Station = df['End Station'].value_counts().idxmax()
    print('Most Common Destinaion:', Destination_Station)
    
    # TO DO: display most frequent combination of start station and end station trip
    Stations = df.groupby(['Start Station', 'End Station']).count()
    print('Most Common Routes Used:', Departure_Station, " & ", Destination_Station)
    
    print('_'*60)

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nIndication of Travel Time\n')
    start_time = time.time()

    # TO DO: display total travel time
    Total_Travel_Time = sum(df['Trip Duration'])
    print('Sum travel time:', Total_Travel_Time/86400, " Days")

    # TO DO: display mean travel time
    Mean_Travel_Time = df['Trip Duration'].mean()
    print('Average travel time:', Mean_Travel_Time/60, " Minutes")

    print('_'*60)

def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nUser statistics analytics.\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_types = df['User Type'].value_counts()
    print('User Types:\n', user_types)

    # TO DO: Display counts of gender
    try:
        gender_category = df['Gender'].value_counts()
        print('Gender Category:', gender_category)
    except KeyError:
        print("Gender Category: No gender statistics available for this selection.")

    # TO DO: Display earliest, most recent, and most common year of birth
    try:
        First_rider_birth_year = df['Birth Year'].min()
        print('First rider birth year:', First_rider_birth_year)
        Youngest_rider_birth_year = df['Birth Year'].max()
        print('Youngest rider birth year:', Youngest_rider_birth_year)
        Most_common_birth_year = df['Birth Year'].value_counts().idxmax()
        print('Most_common_birth year:', Most_common_birth_year)
    except KeyError:
        print("First rider/ youngest rider and/or most common birth year: No user statistics available for this selection.")
        
    print('_'*60)
    
def raw_data(df):
    raw=input('Would you like to view the raw data? \n[yes][no]')
    if raw.lower()!='no':
       count=0
    while True:
        print(df.iloc[count:count+5])
        count+=5
        ask=input('would you like the following 5rows? \n[yes][no]')
        if ask.lower()=='no':
            break
                
    print('_'*60)
    
def main():
    print("|*******************************************|\n")
    print("|               US Bikeshare                |\n")
    print("|        Data Examination Platform          |\n")
    print("|                                           |\n")
    print("|        Interactive tool for insight       |\n") 
    print("|         into bikeshare franchises         |\n")
    print("|                                           |\n")
    print("|Welcome to the bikeshare analitical helper |\n")
    print("|*******************************************|\n")
    while True:
        print("|*******************************************|\n")
        print("| 1) Time Stats                             |\n")
        print("| 2) Station Stats                          |\n")
        print("| 3) Trip Duration Stats                    |\n")
        print("| 4) User Stats                             |\n")
        print("| 5) All Stats                              |\n")
        print("| 6) Raw Stats                              |\n")
        print("| 7) Exit                                   |\n")
        print("|*******************************************|\n")
        run = input("|Please enter one of the above selections  |\n")
        
        if run == "1":
            city, month, day = get_filters()
            df = load_data(city, month, day)
            time_stats(df)
            
        elif run == "2":
            city, month, day = get_filters()
            df = load_data(city, month, day)
            station_stats(df)
            
        elif run == "3":
            city, month, day = get_filters()
            df = load_data(city, month, day)
            trip_duration_stats(df)
            
        elif run == "4":
            city, month, day = get_filters()
            df = load_data(city, month, day)
            user_stats(df)
            
        elif run == "5":
            city, month, day = get_filters()
            df = load_data(city, month, day)
            time_stats(df)
            station_stats(df)
            trip_duration_stats(df)
            user_stats(df)
            
        elif run == "6":
            city, month, day = get_filters()
            df = load_data(city, month, day)
            raw_data(df)
            
        elif run == "7":
            break
            
        else:
            print("|Invalid selection, please attempt one of the above options |\n")          

if __name__ == "__main__":
    main()